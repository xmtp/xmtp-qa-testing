name: Package Compatibility

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
        package-manager: [npm]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xmtp/xmtp-qa-testing
          path: xmtp-qa-testing

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        if: matrix.package-manager == 'pnpm'
        uses: pnpm/action-setup@v3
        with:
          version: 10.7.0

      - name: Install Bun
        if: matrix.package-manager == 'bun'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Yarn 1
        if: matrix.package-manager == 'yarn1'
        run: |
          npm install -g yarn@1.22.19
          yarn --version

      - name: Clean previous installations
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          rm -rf node_modules
          rm -rf dist
          rm -rf .yarn
          rm -f package-lock.json
          rm -f yarn.lock
          rm -f pnpm-lock.yaml
          rm -f bun.lockb

      - name: Install dependencies with npm
        if: matrix.package-manager == 'npm'
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          npm install

      - name: Install dependencies with yarn
        if: matrix.package-manager == 'yarn'
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          touch yarn.lock
          yarn install --no-immutable

      - name: Install dependencies with yarn 1
        if: matrix.package-manager == 'yarn1'
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          touch yarn.lock
          yarn install --no-immutable

      - name: Install dependencies with pnpm
        if: matrix.package-manager == 'pnpm'
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          pnpm install
          pnpm add @xmtp/node-bindings

      - name: Install dependencies with bun
        if: matrix.package-manager == 'bun'
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          bun install

      - name: Verify node_modules
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          if [ ! -d "node_modules" ]; then
            echo "node_modules directory not found, attempting to reinstall"
            if [ "${{ matrix.package-manager }}" = "yarn1" ]; then
              yarn install --no-immutable
            elif [ "${{ matrix.package-manager }}" = "yarn" ]; then
              yarn install --no-immutable
            elif [ "${{ matrix.package-manager }}" = "npm" ]; then
              npm install
            elif [ "${{ matrix.package-manager }}" = "pnpm" ]; then
              pnpm install
            else
              bun install
            fi
          fi
          ls -la node_modules

      - name: Build project
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          if [ "${{ matrix.package-manager }}" = "yarn1" ]; then
            yarn run build
          else
            ${{ matrix.package-manager }} run build
          fi

      - name: Set environment variables
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          echo "GM_BOT_ADDRESS=${{ vars.GM_BOT_ADDRESS }}" >> .env
          echo "LOGGING_LEVEL=${{ vars.LOGGING_LEVEL }}" >> .env

      - name: Generate keys
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          if [ "${{ matrix.package-manager }}" = "yarn1" ]; then
            yarn gen:keys
          else
            ${{ matrix.package-manager }} run gen:keys
          fi
          echo "XMTP_ENV=${{ vars.XMTP_ENV }}" >> .env

      - name: Run agent
        run: |
          cd xmtp-qa-testing/bots/gm-bot
          if [ "${{ matrix.package-manager }}" = "yarn1" ]; then
            timeout 30s yarn run dev | tee output.log
          else
            timeout 30s ${{ matrix.package-manager }} run dev | tee output.log
          fi
          if grep -q "Waiting for messages..." output.log; then
            echo "Success: Agent started successfully and is waiting for messages"
            exit 0
          else
            echo "Error: Agent did not reach 'Waiting for messages...' state"
            cat output.log
            exit 1
          fi

      - name: Send Slack notification
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL}}
          JOB_STATUS: ${{ job.status }}
        run: xmtp-qa-testing/scripts/notify-slack.sh
