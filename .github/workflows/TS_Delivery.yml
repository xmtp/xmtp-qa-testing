name: TS_Delivery
description: "should verify message loss when receiving via 200 streams"

on:
  schedule:
    - cron: "*/40 * * * *" # every 40 min
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
      LOGGING_LEVEL: ${{ vars.LOGGING_LEVEL }}
      XMTP_ENV: ${{ vars.XMTP_ENV }}
      GEOLOCATION: ${{ vars.GEOLOCATION }}
      DELIVERY_AMOUNT: ${{ vars.DELIVERY_AMOUNT }}
      DELIVERY_RECEIVERS: ${{ vars.DELIVERY_RECEIVERS }}
      # Add environment variable to prevent SQLCipher mlock errors
      SQLCIPHER_NO_MLOCK: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "yarn"
        env:
          SKIP_YARN_COREPACK_CHECK: "1"
      - name: Ensure data folder exists
        run: mkdir -p .data
      - name: List data folder contents before caching
        run: ls -la .data
      - name: Cache data folder and .env file
        uses: actions/cache@v3
        with:
          path: |
            .data
            .env
          key: ${{ runner.os }}-TS_Delivery-cache
          restore-keys: |
            ${{ runner.os }}-TS_Delivery-
          enableCrossOsArchive: false
          fail-on-cache-miss: false
      - name: List data folder contents after cache restore
        run: ls -la .data
      - run: corepack enable
      - run: yarn
      - name: Run tests with retry
        run: |
          set +o pipefail  # Ensure pipeline exit code is from the first command

          for i in {1..3}; do
            echo "Attempt $i..."
            
            # Run the test with more comprehensive filtering
            yarn test TS_Delivery 2>&1 | grep -v "Uncaught Exception" | grep -v "Serialized Error" | grep -v "Error: Hpke error" | grep -v "Key not found" | grep -v "This error originated in" | grep -v "The latest test that might" | grep -v "If the error occurred after" | grep -v "The error was thrown" | grep -v "sqlcipher_mem_lock" | grep -v "⎯⎯⎯⎯⎯" | grep -v "group with welcome id" | grep -v "thiserror"
            
            # Check if the test passed based on exit code
            if [ ${PIPESTATUS[0]} -eq 0 ]; then
              # Also check for unhandled errors in the output
              if yarn test TS_Delivery --silent 2>&1 | grep -q "unhandled errors"; then
                echo "Test passed but with unhandled errors. Treating as failure."
                if [ $i -eq 3 ]; then
                  echo "Test failed after 3 attempts due to unhandled errors."
                  exit 1
                fi
                sleep 10
                continue
              fi
              
              echo "Test passed successfully without unhandled errors!"
              break
            fi
            
            if [ $i -eq 3 ]; then
              echo "Test failed after 3 attempts."
              exit 1
            fi
            sleep 10
          done
